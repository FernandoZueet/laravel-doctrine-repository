<?php

/**
 * {{nameEntity}} entity repository. 
 *
 * Code generated by cli command.
 *
 * @see http://github.com/fernandozueet/laravel-doctrine-repository
 *
 * @copyright 2018
 */

namespace App\{{namespace}};

use Ldr\Core\DoctrineBaseRepository;

class {{nameclass}} extends DoctrineBaseRepository {{interface}}
{
    /**
     * Construct.
     */
    public function __construct()
    {
        parent::__construct();
        $this->main($this->fkEntities, $this->mAlias, __CLASS__);
    }

    /*-------------------------------------------------------------------------------------
    * CONFIGS
    *-------------------------------------------------------------------------------------*/

    /**
     * Foreign key entities names.
     *
     * @var array
     */
    private $fkEntities = [{{fkEntities}}];

    /**
     * Main alias.
     *
     * @var string
     */
    private $mAlias = '{{mAlias}}';

    /*-------------------------------------------------------------------------------------
    * GENERAL
    *-------------------------------------------------------------------------------------*/

    /**
     * Method of insertion in the database.
     * Returns the created object.
     *
     * @param array $params Use the same naming convention as the database attribute. In camel case. Ex: firstName
     *
     * @return object
     */
    public function create(array $params): object
    {
        return $this->setCreateArray([
            'fieldTest1',
            'fieldTest2:fk', //foreign key
        ], $params);
    }

    /**
     * Method to update. To update more than one data, use the method updateQuery.
     * Returns the object.
     *
     * @param array $params Use the same naming convention as the database attribute. In camel case. Ex: firstName
     * @param int   $id     table id
     *
     * @return object
     */
    public function update(array $params, int $id): object
    {
        return $this->setUpdateArray([
            'fieldTest1',
            'fieldTest2:fk', //foreign key
        ], $params, $id);
    }

    /**
     * Method to update.
     * Returns total of records affected.
     *
     * @param array $params Use the same naming convention as the database attribute. In camel case. Ex: firstName
     *
     * @return int
     */
    public function updateQuery(array $params): int
    {
        return $this->mainUpdateQuery(function () use ($params) {
            $this->setUpdateArrayQuery([
                'fieldTest1',
                'fieldTest2',
            ], $params);
        });
    }

    /*-------------------------------------------------------------------------------------
    * SELECTS
    *-------------------------------------------------------------------------------------*/

    /**
     * Settings select.
     * All the data from the table.
     */
    public function selectAll()
    {
        //select
        $this->select("{{select}}");
        $this->from();

        //joins
        {{selectJoin}}

        //set results (optional) - more information see the documentation.
        //$this->setQueryResultFormat('getResult'); 

        //set hidration (optional) - more information see the documentation.
        //$this->addHydrateObject(); 
        //$this->addCustomHydrationMode('ObjectAndScalarHydrator');
    }

    /*-------------------------------------------------------------------------------------
    * JOINS
    *-------------------------------------------------------------------------------------*/

    {{joins}}

    /*-------------------------------------------------------------------------------------
    * WHERES
    *-------------------------------------------------------------------------------------*/

    /**
     * Where field {{mAlias}}.id = ?
     *
     * @param int $value
     */
    public function whereIdEq(int $value)
    {
        return $this->expr('id', '=', $value);
    }

    /*-------------------------------------------------------------------------------------
    * ORDERS BYS
    *-------------------------------------------------------------------------------------*/

    /**
     * Sort by field {{mAlias}}.id
     *
     * @param string $value DESC | ASC
     */
    public function orderId(string $value = 'DESC')
    {
        $this->addOrderBy('id', $value);
    }

    /*-------------------------------------------------------------------------------------
    * GROUPS BYS
    *-------------------------------------------------------------------------------------*/

    /**
     * Group by field {{mAlias}}.id
     */
    public function groupById()
    {
        $this->addGroupBy('id');
    }

    /*-------------------------------------------------------------------------------------
    * HAVINGS
    *-------------------------------------------------------------------------------------*/

    /**
     * Having field {{mAlias}}.id = ?
     *
     * @param int $value
     */
    public function havingIdEq(int $value)
    {
        return $this->expr('id', '=', $value);
    }

    /*-------------------------------------------------------------------------------------
    * DQL
    *-------------------------------------------------------------------------------------*/

    //Dql methods here
    //
}